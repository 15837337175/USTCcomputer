
a.out:     file format elf64-x86-64


Disassembly of section .init:

00000000000004b8 <_init>:
 4b8:	48 83 ec 08          	sub    $0x8,%rsp
 4bc:	48 8b 05 25 0b 20 00 	mov    0x200b25(%rip),%rax        # 200fe8 <__gmon_start__>
 4c3:	48 85 c0             	test   %rax,%rax
 4c6:	74 02                	je     4ca <_init+0x12>
 4c8:	ff d0                	callq  *%rax
 4ca:	48 83 c4 08          	add    $0x8,%rsp
 4ce:	c3                   	retq   

Disassembly of section .plt:

00000000000004d0 <.plt>:
 4d0:	ff 35 f2 0a 20 00    	pushq  0x200af2(%rip)        # 200fc8 <_GLOBAL_OFFSET_TABLE_+0x8>
 4d6:	ff 25 f4 0a 20 00    	jmpq   *0x200af4(%rip)        # 200fd0 <_GLOBAL_OFFSET_TABLE_+0x10>
 4dc:	0f 1f 40 00          	nopl   0x0(%rax)

Disassembly of section .plt.got:

00000000000004e0 <__cxa_finalize@plt>:
 4e0:	ff 25 12 0b 20 00    	jmpq   *0x200b12(%rip)        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 4e6:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

00000000000004f0 <_start>:
 4f0:	31 ed                	xor    %ebp,%ebp
 4f2:	49 89 d1             	mov    %rdx,%r9
 4f5:	5e                   	pop    %rsi
 4f6:	48 89 e2             	mov    %rsp,%rdx
 4f9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
 4fd:	50                   	push   %rax
 4fe:	54                   	push   %rsp
 4ff:	4c 8d 05 9a 02 00 00 	lea    0x29a(%rip),%r8        # 7a0 <__libc_csu_fini>
 506:	48 8d 0d 23 02 00 00 	lea    0x223(%rip),%rcx        # 730 <__libc_csu_init>
 50d:	48 8d 3d 09 02 00 00 	lea    0x209(%rip),%rdi        # 71d <main>
 514:	ff 15 c6 0a 20 00    	callq  *0x200ac6(%rip)        # 200fe0 <__libc_start_main@GLIBC_2.2.5>
 51a:	f4                   	hlt    
 51b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000000520 <deregister_tm_clones>:
 520:	48 8d 3d e9 0a 20 00 	lea    0x200ae9(%rip),%rdi        # 201010 <__TMC_END__>
 527:	55                   	push   %rbp
 528:	48 8d 05 e1 0a 20 00 	lea    0x200ae1(%rip),%rax        # 201010 <__TMC_END__>
 52f:	48 39 f8             	cmp    %rdi,%rax
 532:	48 89 e5             	mov    %rsp,%rbp
 535:	74 19                	je     550 <deregister_tm_clones+0x30>
 537:	48 8b 05 9a 0a 20 00 	mov    0x200a9a(%rip),%rax        # 200fd8 <_ITM_deregisterTMCloneTable>
 53e:	48 85 c0             	test   %rax,%rax
 541:	74 0d                	je     550 <deregister_tm_clones+0x30>
 543:	5d                   	pop    %rbp
 544:	ff e0                	jmpq   *%rax
 546:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 54d:	00 00 00 
 550:	5d                   	pop    %rbp
 551:	c3                   	retq   
 552:	0f 1f 40 00          	nopl   0x0(%rax)
 556:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 55d:	00 00 00 

0000000000000560 <register_tm_clones>:
 560:	48 8d 3d a9 0a 20 00 	lea    0x200aa9(%rip),%rdi        # 201010 <__TMC_END__>
 567:	48 8d 35 a2 0a 20 00 	lea    0x200aa2(%rip),%rsi        # 201010 <__TMC_END__>
 56e:	55                   	push   %rbp
 56f:	48 29 fe             	sub    %rdi,%rsi
 572:	48 89 e5             	mov    %rsp,%rbp
 575:	48 c1 fe 03          	sar    $0x3,%rsi
 579:	48 89 f0             	mov    %rsi,%rax
 57c:	48 c1 e8 3f          	shr    $0x3f,%rax
 580:	48 01 c6             	add    %rax,%rsi
 583:	48 d1 fe             	sar    %rsi
 586:	74 18                	je     5a0 <register_tm_clones+0x40>
 588:	48 8b 05 61 0a 20 00 	mov    0x200a61(%rip),%rax        # 200ff0 <_ITM_registerTMCloneTable>
 58f:	48 85 c0             	test   %rax,%rax
 592:	74 0c                	je     5a0 <register_tm_clones+0x40>
 594:	5d                   	pop    %rbp
 595:	ff e0                	jmpq   *%rax
 597:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
 59e:	00 00 
 5a0:	5d                   	pop    %rbp
 5a1:	c3                   	retq   
 5a2:	0f 1f 40 00          	nopl   0x0(%rax)
 5a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 5ad:	00 00 00 

00000000000005b0 <__do_global_dtors_aux>:
 5b0:	80 3d 59 0a 20 00 00 	cmpb   $0x0,0x200a59(%rip)        # 201010 <__TMC_END__>
 5b7:	75 2f                	jne    5e8 <__do_global_dtors_aux+0x38>
 5b9:	48 83 3d 37 0a 20 00 	cmpq   $0x0,0x200a37(%rip)        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 5c0:	00 
 5c1:	55                   	push   %rbp
 5c2:	48 89 e5             	mov    %rsp,%rbp
 5c5:	74 0c                	je     5d3 <__do_global_dtors_aux+0x23>
 5c7:	48 8b 3d 3a 0a 20 00 	mov    0x200a3a(%rip),%rdi        # 201008 <__dso_handle>
 5ce:	e8 0d ff ff ff       	callq  4e0 <__cxa_finalize@plt>
 5d3:	e8 48 ff ff ff       	callq  520 <deregister_tm_clones>
 5d8:	c6 05 31 0a 20 00 01 	movb   $0x1,0x200a31(%rip)        # 201010 <__TMC_END__>
 5df:	5d                   	pop    %rbp
 5e0:	c3                   	retq   
 5e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
 5e8:	f3 c3                	repz retq 
 5ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000005f0 <frame_dummy>:
 5f0:	55                   	push   %rbp
 5f1:	48 89 e5             	mov    %rsp,%rbp
 5f4:	5d                   	pop    %rbp
 5f5:	e9 66 ff ff ff       	jmpq   560 <register_tm_clones>

00000000000005fa <arith>:
int a, b, c, d;
double aa, bb, cc, dd;

void arith()
{
 5fa:	55                   	push   %rbp
 5fb:	48 89 e5             	mov    %rsp,%rbp
//	int a, b, c, d;
	c = a + b;
 5fe:	8b 15 30 0a 20 00    	mov    0x200a30(%rip),%edx        # 201034 <a>
 604:	8b 05 12 0a 20 00    	mov    0x200a12(%rip),%eax        # 20101c <b>
 60a:	01 d0                	add    %edx,%eax
 60c:	89 05 1e 0a 20 00    	mov    %eax,0x200a1e(%rip)        # 201030 <c>
	d = a << b;
 612:	8b 15 1c 0a 20 00    	mov    0x200a1c(%rip),%edx        # 201034 <a>
 618:	8b 05 fe 09 20 00    	mov    0x2009fe(%rip),%eax        # 20101c <b>
 61e:	89 c1                	mov    %eax,%ecx
 620:	d3 e2                	shl    %cl,%edx
 622:	89 d0                	mov    %edx,%eax
 624:	89 05 ee 09 20 00    	mov    %eax,0x2009ee(%rip)        # 201018 <d>
//	double aa, bb, cc, dd;
	cc = aa * bb;
 62a:	f2 0f 10 0d ee 09 20 	movsd  0x2009ee(%rip),%xmm1        # 201020 <aa>
 631:	00 
 632:	f2 0f 10 05 ee 09 20 	movsd  0x2009ee(%rip),%xmm0        # 201028 <bb>
 639:	00 
 63a:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
 63e:	f2 0f 11 05 f2 09 20 	movsd  %xmm0,0x2009f2(%rip)        # 201038 <cc>
 645:	00 
	dd = aa / bb;
 646:	f2 0f 10 05 d2 09 20 	movsd  0x2009d2(%rip),%xmm0        # 201020 <aa>
 64d:	00 
 64e:	f2 0f 10 0d d2 09 20 	movsd  0x2009d2(%rip),%xmm1        # 201028 <bb>
 655:	00 
 656:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
 65a:	f2 0f 11 05 de 09 20 	movsd  %xmm0,0x2009de(%rip)        # 201040 <dd>
 661:	00 
}
 662:	90                   	nop
 663:	5d                   	pop    %rbp
 664:	c3                   	retq   

0000000000000665 <pointers>:
int pointers(int* pa, int* pb)
{
 665:	55                   	push   %rbp
 666:	48 89 e5             	mov    %rsp,%rbp
 669:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
 66d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	c = *pa;
 671:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 675:	8b 00                	mov    (%rax),%eax
 677:	89 05 b3 09 20 00    	mov    %eax,0x2009b3(%rip)        # 201030 <c>
	return c;
 67d:	8b 05 ad 09 20 00    	mov    0x2009ad(%rip),%eax        # 201030 <c>
}
 683:	5d                   	pop    %rbp
 684:	c3                   	retq   

0000000000000685 <function>:
int function(int a, int b)
{
 685:	55                   	push   %rbp
 686:	48 89 e5             	mov    %rsp,%rbp
 689:	48 83 ec 08          	sub    $0x8,%rsp
 68d:	89 7d fc             	mov    %edi,-0x4(%rbp)
 690:	89 75 f8             	mov    %esi,-0x8(%rbp)
	arith();
 693:	b8 00 00 00 00       	mov    $0x0,%eax
 698:	e8 5d ff ff ff       	callq  5fa <arith>
	pointers(&a, &b);
 69d:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
 6a1:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
 6a5:	48 89 d6             	mov    %rdx,%rsi
 6a8:	48 89 c7             	mov    %rax,%rdi
 6ab:	e8 b5 ff ff ff       	callq  665 <pointers>
	return 0x50;
 6b0:	b8 50 00 00 00       	mov    $0x50,%eax
}
 6b5:	c9                   	leaveq 
 6b6:	c3                   	retq   

00000000000006b7 <loop>:
int loop()
{
 6b7:	55                   	push   %rbp
 6b8:	48 89 e5             	mov    %rsp,%rbp
	int i;
	int sum = 0;
 6bb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	for(i = 0; i < 100; i++)
 6c2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
 6c9:	eb 0a                	jmp    6d5 <loop+0x1e>
		sum += i;
 6cb:	8b 45 f8             	mov    -0x8(%rbp),%eax
 6ce:	01 45 fc             	add    %eax,-0x4(%rbp)
	for(i = 0; i < 100; i++)
 6d1:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
 6d5:	83 7d f8 63          	cmpl   $0x63,-0x8(%rbp)
 6d9:	7e f0                	jle    6cb <loop+0x14>
	return sum;
 6db:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
 6de:	5d                   	pop    %rbp
 6df:	c3                   	retq   

00000000000006e0 <condition>:
int condition(int a)
{
 6e0:	55                   	push   %rbp
 6e1:	48 89 e5             	mov    %rsp,%rbp
 6e4:	89 7d fc             	mov    %edi,-0x4(%rbp)
	if(a > 0)
 6e7:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
 6eb:	7e 0c                	jle    6f9 <condition+0x19>
		b = 1;
 6ed:	c7 05 25 09 20 00 01 	movl   $0x1,0x200925(%rip)        # 20101c <b>
 6f4:	00 00 00 
 6f7:	eb 1c                	jmp    715 <condition+0x35>
	else if(a < -1)
 6f9:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
 6fd:	7d 0c                	jge    70b <condition+0x2b>
		b = 1;
 6ff:	c7 05 13 09 20 00 01 	movl   $0x1,0x200913(%rip)        # 20101c <b>
 706:	00 00 00 
 709:	eb 0a                	jmp    715 <condition+0x35>
	else
		b = 0;
 70b:	c7 05 07 09 20 00 00 	movl   $0x0,0x200907(%rip)        # 20101c <b>
 712:	00 00 00 
	return b;
 715:	8b 05 01 09 20 00    	mov    0x200901(%rip),%eax        # 20101c <b>
}
 71b:	5d                   	pop    %rbp
 71c:	c3                   	retq   

000000000000071d <main>:
int main()
{
 71d:	55                   	push   %rbp
 71e:	48 89 e5             	mov    %rsp,%rbp
	return 0;
 721:	b8 00 00 00 00       	mov    $0x0,%eax
}
 726:	5d                   	pop    %rbp
 727:	c3                   	retq   
 728:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
 72f:	00 

0000000000000730 <__libc_csu_init>:
 730:	41 57                	push   %r15
 732:	41 56                	push   %r14
 734:	49 89 d7             	mov    %rdx,%r15
 737:	41 55                	push   %r13
 739:	41 54                	push   %r12
 73b:	4c 8d 25 ae 06 20 00 	lea    0x2006ae(%rip),%r12        # 200df0 <__frame_dummy_init_array_entry>
 742:	55                   	push   %rbp
 743:	48 8d 2d ae 06 20 00 	lea    0x2006ae(%rip),%rbp        # 200df8 <__init_array_end>
 74a:	53                   	push   %rbx
 74b:	41 89 fd             	mov    %edi,%r13d
 74e:	49 89 f6             	mov    %rsi,%r14
 751:	4c 29 e5             	sub    %r12,%rbp
 754:	48 83 ec 08          	sub    $0x8,%rsp
 758:	48 c1 fd 03          	sar    $0x3,%rbp
 75c:	e8 57 fd ff ff       	callq  4b8 <_init>
 761:	48 85 ed             	test   %rbp,%rbp
 764:	74 20                	je     786 <__libc_csu_init+0x56>
 766:	31 db                	xor    %ebx,%ebx
 768:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
 76f:	00 
 770:	4c 89 fa             	mov    %r15,%rdx
 773:	4c 89 f6             	mov    %r14,%rsi
 776:	44 89 ef             	mov    %r13d,%edi
 779:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
 77d:	48 83 c3 01          	add    $0x1,%rbx
 781:	48 39 dd             	cmp    %rbx,%rbp
 784:	75 ea                	jne    770 <__libc_csu_init+0x40>
 786:	48 83 c4 08          	add    $0x8,%rsp
 78a:	5b                   	pop    %rbx
 78b:	5d                   	pop    %rbp
 78c:	41 5c                	pop    %r12
 78e:	41 5d                	pop    %r13
 790:	41 5e                	pop    %r14
 792:	41 5f                	pop    %r15
 794:	c3                   	retq   
 795:	90                   	nop
 796:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 79d:	00 00 00 

00000000000007a0 <__libc_csu_fini>:
 7a0:	f3 c3                	repz retq 

Disassembly of section .fini:

00000000000007a4 <_fini>:
 7a4:	48 83 ec 08          	sub    $0x8,%rsp
 7a8:	48 83 c4 08          	add    $0x8,%rsp
 7ac:	c3                   	retq   
